// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  passwordHash  String?  // Hashed password for authentication
  name          String?
  walletAddress String?  @unique // Made optional for registration flow
  subscription  String   @default("basic") // basic, pro, enterprise
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  wallets       Wallet[]
  agents        Agent[]
  trades        Trade[]
  payments      Payment[]
  portfolios    Portfolio[]
  alerts        Alert[]
  ipfsData      IPFSData[]
}

// CDP Wallet model for storing wallet information
model Wallet {
  id              String   @id @default(cuid())
  userId          String
  walletId        String   @unique // CDP wallet ID
  addresses       String   // JSON string of wallet addresses
  network         String   @default("base-sepolia")
  encryptedData   String?  // Encrypted wallet data for recovery
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  trades          Trade[]

  @@index([userId])
}

// AI Agent model for autonomous trading agents
model Agent {
  id                String    @id @default(cuid())
  userId            String
  name              String
  description       String?
  status            String    @default("active") // active, paused, stopped
  strategy          String    // Trading strategy configuration (JSON string)
  riskParameters    String    // Risk management settings (JSON string)
  performance       String?   // Performance metrics (JSON string)
  aiModel           String    @default("bedrock-nova")
  lastExecutionTime DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  trades          Trade[]
  agentQueries    AgentQuery[]
  payments        Payment[]

  @@index([userId])
  @@index([status])
}

// Trade model for tracking all trades
model Trade {
  id              String   @id @default(cuid())
  userId          String
  agentId         String?
  walletId        String
  txHash          String   @unique
  fromAsset       String
  toAsset         String
  amount          Float
  price           Float
  usdValue        Float
  type            String   // buy, sell, swap
  status          String   @default("pending") // pending, success, failed
  metadata        String?  // Additional trade metadata (JSON string)
  executedAt      DateTime @default(now())

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  agent           Agent?   @relation(fields: [agentId], references: [id])
  wallet          Wallet   @relation(fields: [walletId], references: [id])

  @@index([userId])
  @@index([agentId])
  @@index([status])
  @@index([executedAt])
}

// Payment model for x402pay transactions
model Payment {
  id              String   @id @default(cuid())
  userId          String
  agentId         String?  // Link payment to a specific agent
  amount          Float
  currency        String   @default("USDC")
  type            String   // query, subscription, feature
  reference       String?  // Reference to what was paid for
  txHash          String?  @unique
  transactionHash String?  // Alternative field name for transaction hash
  status          String   @default("pending") // pending, completed, failed
  metadata        String?  // JSON string
  createdAt       DateTime @default(now())

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  agent           Agent?   @relation(fields: [agentId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([agentId])
}

// Portfolio model for tracking user holdings
model Portfolio {
  id              String   @id @default(cuid())
  userId          String
  asset           String
  balance         Float
  balanceUSD      Float
  avgBuyPrice     Float?
  profitLoss      Float?
  profitLossPerc  Float?
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, asset])
  @@index([userId])
}

// AgentQuery model for tracking monetized agent queries
model AgentQuery {
  id              String   @id @default(cuid())
  agentId         String
  queryerId       String   // User who queried the agent
  query           String
  response        String   // JSON string response
  price           Float
  paymentId       String?
  createdAt       DateTime @default(now())

  // Relations
  agent           Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
  @@index([queryerId])
}

// Alert model for user notifications and alerts
model Alert {
  id              String   @id @default(cuid())
  userId          String
  type            String   // alert_type: trade, portfolio, system, agent
  message         String   // The alert message content
  severity        String   @default("info") // info, warning, error, success
  isRead          Boolean  @default(false)
  condition       String?  // Optional: alert conditions (JSON string) for complex alerts
  lastTriggered   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([severity])
}

model MarketData {
  id                   String   @id @default(cuid())
  symbol               String   @unique
  price                Float
  volume24h            Float
  change24h            Float
  changePercentage24h  Float
  marketCap            Float?
  lastUpdated          DateTime @default(now())

  @@map("market_data")
}

model CandlestickData {
  id        String   @id @default(cuid())
  symbol    String
  timestamp DateTime
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Float
  interval  String

  @@unique([symbol, timestamp, interval])
  @@map("candlestick_data")
}

model IPFSData {
  id        String   @id @default(cuid())
  userId    String?
  agentId   String
  hash      String   @unique
  type      String   // TRADING_HISTORY, PERFORMANCE_REPORT, AUDIT_TRAIL
  fileName  String?
  fileSize  Int?
  pinSize   Int?
  size      Int?
  pinned    Boolean  @default(true)
  metadata  String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ipfs_data")
}