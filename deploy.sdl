---
version: "2.0"

services:
  web:
    image: "${DOCKER_IMAGE:-ghcr.io/your-org/agentvault:latest}"
    
    # Environment variables for the application
    env:
      - NODE_ENV=${AKASH_ENV:-production}
      - PORT=4000
      - API_URL=https://agentvault.akash.network
      - CLIENT_URL=https://agentvault.akash.network
      
      # Database configuration
      - DATABASE_URL=${DATABASE_URL}
      - DB_MAX_CONNECTIONS=10
      
      # Redis configuration  
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=6379
      
      # AWS Bedrock configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
      - BEDROCK_MODEL_ID=anthropic.claude-3-5-sonnet-20241022-v2:0
      
      # CDP Wallet configuration
      - CDP_API_KEY=${CDP_API_KEY}
      - CDP_PRIVATE_KEY=${CDP_PRIVATE_KEY}
      - CDP_NETWORK=base-sepolia
      
      # x402pay configuration
      - X402_PAY_API_KEY=${X402_PAY_API_KEY}
      - X402_PAY_SECRET_KEY=${X402_PAY_SECRET_KEY}
      - X402_PAY_ENV=sandbox
      - X402_PAY_ENABLED=true
      
      # Pinata configuration
      - PINATA_JWT=${PINATA_JWT}
      - PINATA_GATEWAY_URL=https://gateway.pinata.cloud
      
      # Security configuration
      - JWT_SECRET=${JWT_SECRET:-hackathon-demo-secret-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-demo-encryption-key}
      
      # Feature flags for hackathon demo
      - ENABLE_DEMO_MODE=false
      - ENABLE_PAPER_TRADING=true
      - ENABLE_REAL_TRADING=true
      - ENABLE_WEBSOCKET=true
      
      # Agent configuration
      - AGENT_EXECUTION_INTERVAL=60000
      - AGENT_MAX_TRADE_SIZE=1000
      - AGENT_DEFAULT_SLIPPAGE=0.02
      - AGENT_MAX_DAILY_TRADES=50
      
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100

    # Health check configuration
    healthcheck:
      http:
        path: /api/health
        port: 4000
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Resource requirements
    expose:
      - port: 4000
        as: 80
        to:
          - global: true
            
    # Startup command
    command:
      - "npm"
      - "run"
      - "production"

  redis:
    image: redis:7-alpine
    
    # Redis configuration
    command:
      - "redis-server"
      - "--appendonly"
      - "yes"
      - "--maxmemory"
      - "256mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
    
    # Health check for Redis
    healthcheck:
      exec:
        command:
          - "redis-cli"
          - "ping"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    expose:
      - port: 6379

  # Database migration job (runs once on deployment)
  migrate:
    image: "${DOCKER_IMAGE:-ghcr.io/your-org/agentvault:latest}"
    
    env:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${AKASH_ENV:-production}
    
    command:
      - "npx"
      - "prisma"
      - "migrate"
      - "deploy"
    
    # This is a job that runs once and exits
    restart_policy: "never"

profiles:
  compute:
    web:
      resources:
        cpu:
          units: 2
        memory:
          size: 4Gi
        storage:
          size: 10Gi
        
    redis:
      resources:
        cpu:
          units: 0.5
        memory:
          size: 512Mi
        storage:
          size: 2Gi
          
    migrate:
      resources:
        cpu:
          units: 0.5
        memory:
          size: 1Gi
        storage:
          size: 1Gi

  placement:
    dcloud:
      # Pricing strategy for cost optimization
      pricing:
        web:
          denom: uakt
          amount: 1000
        redis:
          denom: uakt
          amount: 500
        migrate:
          denom: uakt
          amount: 100

      attributes:
        # Prefer providers with good performance
        host: akash
        tier: community
        # Require persistent storage
        persistent-storage: required

      # Signed by requirements (optional for enhanced security)
      signedBy:
        anyOf: []

deployment:
  web:
    dcloud:
      profile: web
      count: 2  # Run 2 instances for high availability
      
  redis:
    dcloud:
      profile: redis
      count: 1
      
  migrate:
    dcloud:
      profile: migrate
      count: 1 